#!/bin/bash
# Matthew Gwynne, 6.2.2011 (Swansea)
# Copyright 2011 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute 
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the 
# License, or any later version.


#
# Goes through all combinations of AES translations and plaintext-ciphertext
# pairs and runs all solvers on the combination of these instances.
#

# BUG: bad specification

# Takes eight arguments:
#
#   - The number, r, of rounds to run the experiment over.
#     The script will generate an AES instance with i + 1/3 rounds and 
#     assignments for 1 <= i <= r.
#   - The number, k, of plaintext-ciphertext pairs to generate for each
#     AES round.
#   - The number of columns, c, in the AES block (1-4).
#   - The number of rows, rw, in the AES block (1-4).
#   - The size, e, of the element field (4 or 8).
#   - Whether or not to use a special final round, fin_b (true or false).
#   - Which key expansion translation to use, ks_tran:
#       - aes_std_ks - Translating AES key expansion based on the standard 
#                      definition.
#       - aes_id_ks - Translating AES key expansion as the idenity on
#                     round keys, i.e., all round keys are equal to the 
#                     input key.
#   - The AES box translation to use, box_tran:
#       - aes_ts_box - The canonical translation for all boxes.
#       - aes_small_box - The smallest CNF translations for all boxes.
#       - aes_rbase_box - The smallest r_1 bases for each box.
#   - Which MixColumns translation to use, mc_tran:
#       - aes_mc_forward - Translating MixColumns in the encryption direction.
#       - aes_mc_bidirectional - Translating MixColumns in the both directions.
#       - aes_mc_boolm - Translating MixColumns directly as bit-level additions.
#       - aes_mc_box - Translating whole MixColumn operation as a single box.
#
# The script generates output files in the experiment directory (assumed to 
# have been created by generate_aes_experiment):
#
#  ssaes_r1-${r}_c${c}_rw${rw}_e${e}_f${fin_z}_k1-${k}_${box_tran}_${mc_tran}
#
# with the name 
#   
#   experiment_r${ri}_k${ki}.cnf_${solver_name}
#
# for each solver run, round, and plaintext-ciphertext pair where ri ranges 
# from 1 to r, ki ranges from 1 to k and solver_name is the the name of the 
# SAT solver run in that instance. The contents of the file are simply the 
# full output of the corresponding solver on that parameter instance.
#
# All experiments are run at nice level 19 to avoid disturbing other processes.
#
# Dependencies:
#   This script depends on generate_aes_experiment yielding
#   files with names of the form ss_r${r}_* and 
#   ssaes_pcpair_r${r}_*_s${k}.cnf, and being in an experiment directory
#   with a name of the form 
#   ssaes_r1-${r}_c${c}_rw${rw}_e${e}_f${fin_z}_k1-${k} where fin_z is
#   1 if fin_b was true and 0 otherwise.
# 
# Assumptions:
#   This script assumes there is no file called "experiment.cnf" in
#   the experiment directory. If there is, this file will be overwritten
#   and then deleted.
#

# set -o errexit # Can't use as SAT solvers return non-zero.
set -o nounset

script_name="run_aes_experiment"
err="ERROR[${script_name}]:"
version="0.1.0"

if [[ ! $# -eq 9 ]]; then
  echo -n "${err} Takes exactly nine arguments, the number of rounds, number ",
  echo -n "of plaintext-ciphertext pairs per round, the number of columns, "
  echo -n "the number of rows, the field size, whether or not to use a special "
  echo -n "final round, which key expansion translation to use, which box "
  echo -n "translation to use and which MixColumn translation to use."
  exit 1;
fi  

# Check if monitor is set from the environment and set it if not.
if [[ ! -n ${oklib_monitor+1} ]]; then
    oklib_monitor=false
fi
rounds=$1
unique_keys_per_round=$2
columns=$3
rows=$4
e=$5
fin_b=$6
ks_tran=$7
box_tran=$8
mc_tran=$9

if [[ ${fin_b} == "true" ]]; then
  fin_z=1
else
  fin_z=0
fi

union_program=UnionDimacs-O3-DNDEBUG
experiment_output_file=experiment.cnf
run_all_solvers_script=$(readlink -m $(dirname $0))/run_all_solvers_2by2

exp_directory_name=ssaes_r1-${rounds}_c${columns}_rw${rows}_e${e}_f${fin_z}_k1-${unique_keys_per_round}_${ks_tran}_${box_tran}_${mc_tran}
cd ${exp_directory_name}

renice -n 19
for r in $(seq 1 ${rounds}); do
    round_file=$(echo ssaes_r${r}_*.cnf)
    if [[ ${oklib_monitor} == "true" ]]; then 
        echo "Running solvers for round ${r}..."
    fi
    for k in $(seq 1 ${unique_keys_per_round}); do
        if [[ ${oklib_monitor} == "true" ]]; then 
            echo "... with Key seed ${k} (round ${r})"
        fi
        experiment_output_file=experiment_r${r}_k${k}.cnf
        assignment_file=$(echo ssaes_*pair_r${r}_*_s${k}.cnf)
        ${union_program} ${round_file} ${assignment_file} > ${experiment_output_file}
        ${run_all_solvers_script} ${experiment_output_file} | awk " { print \"R[${r}/${rounds}]K[${k}/${unique_keys_per_round}]: \" \$0}"
        rm -f ${experiment_output_file}
    done
done

exit 0
