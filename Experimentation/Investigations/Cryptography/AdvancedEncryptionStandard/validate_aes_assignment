#!/bin/bash
# Matthew Gwynne, 22.1.2011 (Swansea)
# Copyright 2011 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute 
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the 
# License, or any later version.

#
# Script to check that the satisfying assignment returned from a SAT solver for
# the AES problem, specified by the parameters given as arguments to this script, 
# is a valid assignment.
# 
# In other words, the plaintext represented by the first num_columns * num_rows 
# * exp bits, along with the key represented by the next set of bits of the 
# same length, encrypts to the ciphertext given in the next set of bits 
# (2*num_columns*num_rows*exp+1 .. num_columns*num_rows*exp).
#
# See ss_validate in 
# OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/Translations.mac .
#
# Parameters:
#   r 
#     The number of rounds (1+).
#   columns
#     The number of columns in the AES/small scale block (1-4).
#   rows
#     The number of rows in the AES/small scale block (1-4).
#   exp
#     The exponent of the finite field used for the AES/small scale block 
#     elements (4 / 8).
#   final_round_b
#     Whether or not to use a special round function for the final round 
#     without MixColumns (like the standard AES), or to have all rounds use
#     the full round function. Here we use 1 for true and 0 for false.
#
# Output:
#   Returns 0 if the partial assignment represents a valid AES/small scale
#   encryption, or non-zero otherwise.
# 

set -o errexit
set -o nounset

script_name="validate_aes_assignment"
err="ERROR[${script_name}]:"
version="0.1.5"

if [[ $# -ne 6 ]]; then
  echo -n "${err} Takes precisely 5 arguments, the number of rounds, "
  echo -n "the number of columns in the block, the number of rows in the block, the "
  echo -n "size of the exponent of the field, whether or not the cipher uses the "
  echo -n "special final round (0 for false, 1 for true) and which key schedule to use."
  echo -n "The assignment, given as a "
  echo -n "v-line from a SAT solver is taken from STDIN and a non-zero result is "
  echo "returned if the values are incorrect."
  exit 1;
fi  

rounds=$1
columns=$2
rows=$3
e=$4
final_round_b=$5
ks_variant=$6
max_input_var=$(expr ${columns} "*" ${rows} "*" ${e})


partial_assignment_mac_file=$(mktemp --suffix=".mac")
echo "PA : {" > ${partial_assignment_mac_file}
cat - | sed 's/^v\? *//g' | sed 's/ *$/,/g' | tr -d '\n' | sed 's/ \+/,/g' | sed 's/,0,//g' >> ${partial_assignment_mac_file}
echo '}$' >> ${partial_assignment_mac_file}

oklib --maxima --batch-string='"oklib_load(\"OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/Translations.mac\"); load(\"'${partial_assignment_mac_file}'\"); ss_validate(PA,'${rounds}','${columns}','${rows}', '${e}', if '${final_round_b}' = 1 then true else false, '${ks_variant}');"' | grep "^(%o3) true *\$" > /dev/null
result=$?

rm -f ${partial_assignment_mac_file}

exit ${result}
