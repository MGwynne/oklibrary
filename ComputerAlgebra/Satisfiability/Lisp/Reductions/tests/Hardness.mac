/* Matthew Gwynne, 21.6.2011 (Swansea) */
/* Copyright 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Reductions/tests/Hardness.mac
  \brief Tests for components related to hardness

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/tests/Hardness.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/data/SmallScaleFieldMulCNF.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Primality/PrimeImplicatesImplicants.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac")$

kill(f)$


/* **********************
   * Computing hardness *
   **********************
*/

okltest_hardness_cs(f) := block(
  assert(f({}) = 0),
  assert(f({{}}) = 0),
  assert(f({{1}}) = 0),
  assert(f({{1,2}}) = 0),
  assert(f({{1,2},{-2,3}}) = 1),
  assert(f({{1},{1,2},{1,-2}}) = 0),
  assert(f({{1,2},{1,-2}}) = 1),
  assert(f({{1,2},{-1,2},{1,-2},{-1,-2}}) = 2),
  assert(f({{1,-2},{-1,2},{2,-3},{-2,3},{1,3},{-1,-3}}) = 2),
  assert(f({{1,2,3},{-1,2},{1,-2},{-1,-2}}) = 2),
  assert(f({{1,2,3},{1,-2,3},{1,2,-3},{1,-2,-3}}) = 2),
  assert(f(setify(ev_hm(ss_field_rbase_cnfs,[4,2])[2])) = 1),
  if oklib_test_level = 0 then return(true),
  assert(f(setify(ev_hm(ss_field_rbase_cnfs,[4,3])[2])) = 1),
  true)$

okltest_hardness_u_cs(f) := block(
  assert(f({{}}) = 0),
  assert(f({{1},{-1}}) = 1),
  assert(f({{1,-2},{-1,2},{2,-3},{-2,3},{1,3},{-1,-3}}) = 2),
  for k : 0 thru if oklib_test_level=0 then 5 else 7 do (
   for l : 0 thru if oklib_test_level=0 then 3 else 5 do (
     assert(f(smusat_genhorn_cs(k,l)) = min(k,l)) )),
  true)$


/* **********************************
   * Computing propagation-hardness *
   **********************************
*/

okltest_phardness_cs(f) := (
  assert(f({}) = 0),
  assert(f({{}}) = 0),
  assert(f({{1}}) = 1),
  assert(f({{1,2}}) = 1),
  assert(f({{1,2},{-2,3}}) = 1),
  assert(f({{1,2},{-1}}) = 1),
  assert(f({{1,2},{-1,2}}) = 2),
  assert(f({{1,2},{-1,2},{1,-2},{-1,-2}}) = 2),
  assert(f({{1,-2},{-1,2},{2,-3},{-2,3},{1,3},{-1,-3}}) = 2),
  assert(f({{1,2,3},{-1,2},{1,-2},{-1,-2}}) = 2),
  assert(f({{1,2,3},{-1,2,3},{1,-2,3}}) = 2),
  assert(f({{1,2,3},{-1,2},{1,-2},{-1,-2}}) = 2),
  assert(f({{1,2,3},{-1,2,3},{1,-2,3},{-1,-2,3}}) = 3),
  true)$

/*!
\endhtmlonly
*/
