/* Oliver Kullmann, 23.9.2011 (Swansea) */
/* Copyright 2011, 2012, 2013 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Resolution/Proofs.mac
  \brief Components for handling resolution proofs

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/Proofs.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Trees/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Pigeonhole.mac")$



/* ******************
   * Basic concepts *
   ******************
*/

/*
  A "resolution proof as a list" ("resl") is a list, where each entry is
  either a clause (an "axiom") or a pair consisting of a clause
  (the "resolvent") and a pair of (smaller) indices (the indices of the
  "parent clauses").

  A "resolution tree" ("reslrt") is a labelled rooted tree (lrt) T where T is
  a binary tree such that each inner node is the resolvent of its two children.
  The notion of an lrt is defined in ComputerAlgebra/Trees/Lisp/Basics.mac.
*/


/* ************************************
   * Checking the defining properties *
   ************************************
*/

/* Is list L a resolution proof as a list: */
resl_p(L) := listp(L) and block([is_resl : true, L_i],
  for i : 1 thru length(L) while is_resl do (
    L_i : L[i],
    is_resl : c_p(L_i) or
      (listp(L_i) and is(length(L_i) = 2) and
        c_p(L_i[1]) and listp(L_i[2]) and block([ind_l : L_i[2]],
          is(length(ind_l) = 2) and integerp(ind_l[1]) and integerp(ind_l[2])
          and is(0 < ind_l[1]) and is(ind_l[1] < i) and is(0 < ind_l[2]) and
          is(ind_l[2] < i) and
          if c_p(L[ind_l[1]]) and c_p(L[ind_l[2]]) then
            (resolvable(L[ind_l[1]],L[ind_l[2]]) and
             is(resolvent(L[ind_l[1]],L[ind_l[2]]) = L_i[1]))
          else if c_p(L[ind_l[1]]) and not(c_p(L[ind_l[2]])) then
            (resolvable(L[ind_l[1]],L[ind_l[2]][1]) and
             is(resolvent(L[ind_l[1]],L[ind_l[2]][1]) = L_i[1]))
          else if not(c_p(L[ind_l[1]])) and c_p(L[ind_l[2]]) then
            (resolvable(L[ind_l[1]][1],L[ind_l[2]]) and
             is(resolvent(L[ind_l[1]][1],L[ind_l[2]]) = L_i[1]))
          else
            (resolvable(L[ind_l[1]][1],L[ind_l[2]][1]) and
             is(resolvent(L[ind_l[1]][1],L[ind_l[2]][1]) = L_i[1])) ))),
    return(is_resl))$

/* Is list L a resolution refutation as a list: */
resl_ref_p(L) :=
  resl_p(L) and (member({},L) or member({}, resolvents_resl2cl(L)))$

/* Is T a "resolution tree": */
reslrt_p(T) := listp(T) and
  if length(T) = 1 then c_p(T[1]) /* Leaves must be clauses */
  else is(length(T) = 3) and c_p(T[1]) and
       reslrt_p(T[2]) and reslrt_p(T[3]) and
       resolvable(T[2][1],T[3][1]) and is(resolvent(T[2][1],T[3][1]) = T[1])$


/* ************************************
   * Other properties                 *
   ************************************
*/

/* Is L irredundant (we create any unused resolvents): */
irredundant_ref_resl(L) := block([used_indices, unused_indices],
  used_indices :
    setify(lappend(
        map(lambda([R], R[2]),
          sublist(L, lambda([R],not(c_p(R))) )))),
  unused_indices : setdifference(setn(length(L)-1),used_indices),
  return(is(unused_indices = {})))$


/* ************************************
   * Extraction                       *
   ************************************
*/

/* Axioms of a resolution list as a clause-list: */
axioms_resl2cl(L) := sublist(L,c_p)$

/* Resolvents of a resolution list as a clause-list: */
resolvents_resl2cl(L) := map(lambda([a],a[1]), sublist(L,listp))$


/* ************************************
   * Modifying proofs                 *
   ************************************
*/


/* Renaming variables in a resolution proof L where the renaming is given as
   a hashmap h mapping literals to literals: */
rename_resl(L,h) :=
  map(lambda([R],
        if c_p(R) then substitute_c(R,h)
        else [substitute_c(R[1],h),R[2]]), L)$

/* Composition of resolution proofs via concatenation, removing repeated
   clauses and re-indexing: */
compose_resl([L]) := block([h : sm2hm({}), i : 0,LR,_r2c],
  /* Replace indices with clauses */
  _r2c : lambda([R], if c_p(R) then R else R[1]),
  LR : map(lambda([P],
         map(lambda([R],
           if c_p(R) then R
           else [R[1],[_r2c(P[R[2][1]]),_r2c(P[R[2][2]])]]), P)), L),
  LR : lappend(LR),
  LR : map(lambda([R],
         if c_p(R) then
           if ev_hm(h,R) # false  then false
           else (i : i + 1, set_hm(h,R,i), R)
         else
           if ev_hm(h,R[1]) # false then false
           else (i : i + 1, set_hm(h,R[1],i),
                  [R[1], [ev_hm(h,R[2][1]), ev_hm(h,R[2][2])]])), LR),
  return(delete(false,LR)))$


/* ************************************
   * Generators                       *
   ************************************
*/


/* A polynomial-size resolution proof for weak_php_unsat_ext_uni_fcs(n): */
php_ext_uni_resl(n) := block([axioms, resolvents_cl : [], c2i_h : sm2hm({}), p2q_h : sm2hm({})],
  axioms : weak_php_unsat_ext_uni_fcs(n),
  /* Create all the resolutions storing explicitly the clauses, not indices;
     we map clauses to indices later. */
  /* Small clauses for each level */
  resolvents_cl : append(resolvents_cl, reverse(
    create_list(
      [[{-php_ext_var(l,i,j),php_ext_var(l+1,i,j),-php_ext_var(l+1,k,j)},
         [{-php_ext_var(l,i,j),php_ext_var(l+1,i,j),php_ext_var(l+1,l+2,j)},
           {-php_ext_var(l+1,l+2,j), -php_ext_var(l+1,k,j)}]],
       [{-php_ext_var(l,i,j),-php_ext_var(l+1,k,j)},
         [{-php_ext_var(l,i,j),php_ext_var(l+1,i,j),-php_ext_var(l+1,k,j)},
           {-php_ext_var(l+1,i,j), -php_ext_var(l+1,k,j)}]],
       [{-php_ext_var(l,k,j),php_ext_var(l+1,k,j),-php_ext_var(l+1,i,j)},
         [{-php_ext_var(l,k,j),php_ext_var(l+1,k,j),php_ext_var(l+1,l+2,j)},
           {-php_ext_var(l+1,l+2,j), -php_ext_var(l+1,i,j)}]],
       [{-php_ext_var(l,k,j),-php_ext_var(l+1,i,j)},
         [{-php_ext_var(l,k,j),php_ext_var(l+1,k,j),-php_ext_var(l+1,i,j)},
           {-php_ext_var(l+1,i,j), -php_ext_var(l+1,k,j)}]],
       [{-php_ext_var(l,k,j),-php_ext_var(l,i,j),php_ext_var(l+1,k,l+1)},
         [{-php_ext_var(l,k,j),php_ext_var(l+1,k,j),php_ext_var(l+1,k,l+1)},
           {-php_ext_var(l,i,j),-php_ext_var(l+1,k,j)}]],
       [{-php_ext_var(l,k,j),-php_ext_var(l,i,j),php_ext_var(l+1,i,l+1)},
         [{-php_ext_var(l,i,j),php_ext_var(l+1,i,j),php_ext_var(l+1,i,l+1)},
           {-php_ext_var(l,k,j),-php_ext_var(l+1,i,j)}]],
       [{-php_ext_var(l,k,j),-php_ext_var(l,i,j),-php_ext_var(l+1,k,l+1)},
         [{-php_ext_var(l,k,j),-php_ext_var(l,i,j),php_ext_var(l+1,i,l+1)},
           {-php_ext_var(l+1,k,l+1),-php_ext_var(l+1,i,l+1)}]],
       [{-php_ext_var(l,k,j),-php_ext_var(l,i,j)},
         [{-php_ext_var(l,k,j),-php_ext_var(l,i,j),-php_ext_var(l+1,k,l+1)},
          {-php_ext_var(l,k,j),-php_ext_var(l,i,j),php_ext_var(l+1,k,l+1)}]]],
       l,1,n-1, i,1,l+1, j, 1,l, k, 1, i-1))),
  /* Long clauses for each level */
  resolvents_cl : append(resolvents_cl, lappend( reverse(
    create_list(
      append(
        create_list(
          [[ setify(
               append(
                 create_list(php_ext_var(l,i,j_t), j_t, 1, j),
                 create_list(php_ext_var(l+1,i,j_t), j_t, j+1, l+1))),
             [setify(
               append(
                 create_list(php_ext_var(l,i,j_t), j_t, 1, j-1),
                 create_list(php_ext_var(l+1,i,j_t), j_t, j, l+1))),
             {php_ext_var(l,i,j),-php_ext_var(l+1,i,j)} ]]],
          i, 1, l+1, j, 1, l),
        create_list(
          [[ setify(
               append(
                 create_list(php_ext_var(l,i,j_t), j_t, 1, j),
                 create_list(php_ext_var(l+1,l+2,j_t), j_t, j+1, l+1),
                 [-php_ext_var(l+1,i,l+1)])),
             [setify(
               append(
                 create_list(php_ext_var(l,i,j_t), j_t, 1, j-1),
                 create_list(php_ext_var(l+1,l+2,j_t), j_t, j, l+1),
                 if j > 1 then [-php_ext_var(l+1,i,l+1)] else [])),
             {php_ext_var(l,i,j),-php_ext_var(l+1,i,l+1),-php_ext_var(l+1,l+2,j)} ]]],
          i,1,l+1,j, 1, l),
        create_list(
          [[ setify(
               append(
                 create_list(php_ext_var(l,i,j_t), j_t, 1, l),
                 [-php_ext_var(l+1,i,l+1)])),
             [setify(
               append(
                 create_list(php_ext_var(l,i,j_t), j_t, 1, l),
                 [php_ext_var(l+1,l+2,l+1),-php_ext_var(l+1,i,l+1)])),
             {-php_ext_var(l+1,i,l+1),-php_ext_var(l+1,l+2,l+1)} ]]],
          i,1,l+1),
        create_list(
          [[ setify(
             create_list(php_ext_var(l,i,j_t), j_t, 1, l)),
             [setify(
               append(
                 create_list(php_ext_var(l,i,j_t), j_t, 1, l),
                 [-php_ext_var(l+1,i,l+1)])),
              setify(
               append(
                 create_list(php_ext_var(l,i,j_t), j_t, 1, l),
                 [php_ext_var(l+1,i,l+1)])) ]]],
          i,1,l+1)),
    l,1,n-1)))),
  /* Finally derive the empty clause: */
  if n > 0 then
    resolvents_cl : append(resolvents_cl,
      [[[ {-php_ext_var(1,2,1)},
       [{-php_ext_var(1,1,1), -php_ext_var(1,2,1)},
       {php_ext_var(1,1,1)}]],
       [{},
         [{php_ext_var(1,2,1)},
         {-php_ext_var(1,2,1)}]]]]),
  /* Map clauses to indices and php_ext_var(n+1,i,j) to php_var(i,j) */
  resolvents_cl : append(listify(axioms[2]),lappend(resolvents_cl)),
  resolvents_cl : map(
    lambda([R,i],
      if c_p(R) then (set_hm(c2i_h,R,i), R)
      else (set_hm(c2i_h, R[1], i),
            [R[1], map(lambda([C],ev_hm(c2i_h,C)),R[2])])),
    resolvents_cl,
    create_list(i,i,1,length(resolvents_cl))),
  return(resolvents_cl))$
/* The resolution proof of weak_php_unsat_ext_fcs(n): */
php_ext_resl(n) := rename_resl(php_ext_uni_resl(n),sm2hm(var_ephp2php_sm(n)))$


/* Statistics for php_ext_uni_resl: */
nvar_php_ext_uni_resl(n) := nvar_weak_php_unsat_ext(n)$
ncl_php_ext_uni_resl(n) := (6*n^4+11*n^3+3*n^2+4*n+6)/6$


/* Resolution refutation for the translation of

   x_1 + ... + x_{n-1} + x_n = 0 (using y_2 to y_{n-1} auxiliary variables)
   x_1 + ... + x_{n-1} + -x_n = 0 (using y'_2 to y'_{n-1} auxiliary variables)

   for n>= 3 (for the translation, see gen_2xor_gcl in
   ComputerAlgebra/Satisfiability/Lisp/Generators/LinearEquations.mac): */


/* Providing names for variable indices in gen_2xor_fcl(n): */
xor_x_var(n,i) := i$
xor_y_var(n,i) := n + (i-1)$
xor_yp_var(n,i) := n + (n-2) + (i-1)$
/* The x (input) variables start from 1 to n, then the auxilliary y and y'
   variables go from y_2 to y_{n-1} and y'_2 to y'_{n-1} respectively. */

/* Deriving
     primec_0(y_{i-1} = -y'_{i-1})
   from
     primec_0(y_{i} = -y'_{i})
     primec_0(y_{i-1} \oplus x_{i} = y_{i})
     primec_0(y'_{i-1} \oplus x_{i} = y'_{i})
   using the variable naming scheme from gen_2xor_fcl(n) for n >= 4: */
xor_2c_step_resl(n,i) := [
  /* Initial clauses: primec_0(y_{i} = -y'_{i}): */
  {-xor_y_var(n,i),-xor_yp_var(n,i)},                                /* c1 */
  {xor_y_var(n,i),xor_yp_var(n,i)},                                  /* c2 */
  /* Initial clauses: primec_0(y_{i-1} \oplus x_{i} = y_{i}): */
  {-xor_y_var(n,i-1),-xor_x_var(n,i),-xor_y_var(n,i)},               /* c3 */
  {-xor_y_var(n,i-1),xor_x_var(n,i),xor_y_var(n,i)},                 /* c4 */
  {xor_y_var(n,i-1),-xor_x_var(n,i),xor_y_var(n,i)},                 /* c5 */
  {xor_y_var(n,i-1),xor_x_var(n,i),-xor_y_var(n,i)},                 /* c6 */
  /* Initial clauses: primec_0(y'_{i-1} \oplus x_{i} = y'_{i}): */
  {-xor_yp_var(n,i-1),-xor_x_var(n,i),-xor_yp_var(n,i)},             /* c7 */
  {-xor_yp_var(n,i-1),xor_x_var(n,i),xor_yp_var(n,i)},               /* c8 */
  {xor_yp_var(n,i-1),-xor_x_var(n,i),xor_yp_var(n,i)},               /* c9 */
  {xor_yp_var(n,i-1),xor_x_var(n,i),-xor_yp_var(n,i)},               /* c10 */
  /* Deriving primec_0(y_{n-2} \oplus x_{n-1} = \ol{y'_{n-1}}): */
  [{-xor_y_var(n,i-1),-xor_x_var(n,i),xor_yp_var(n,i)},[3,2]],       /* c11 */
  [{-xor_y_var(n,i-1),xor_x_var(n,i),-xor_yp_var(n,i)},[4,1]],       /* c12 */
  [{xor_y_var(n,i-1),-xor_x_var(n,i),-xor_yp_var(n,i)},[5,1]],       /* c13 */
  [{xor_y_var(n,i-1),xor_x_var(n,i),xor_yp_var(n,i)},[6,2]],         /* c14 */
  /* Deriving primec_0(y_{n-2} = \ol{y'_{n-2}}): */
  [{-xor_yp_var(n,i-1),-xor_y_var(n,i-1),xor_yp_var(n,i)},[8,11]],   /* c15 */
  [{-xor_yp_var(n,i-1),-xor_y_var(n,i-1),-xor_yp_var(n,i)},[7,12]],  /* c16 */
  [{xor_yp_var(n,i-1),xor_y_var(n,i-1),-xor_yp_var(n,i)},[10,13]],   /* c17 */
  [{xor_yp_var(n,i-1),xor_y_var(n,i-1),xor_yp_var(n,i)},[9,14]],     /* c18 */
  /* Deriving primec_0(y_{i-1} = -y'_{i-1}): */
  [{-xor_yp_var(n,i-1),-xor_y_var(n,i-1)},[15,16]],                  /* c19 */
  [{xor_yp_var(n,i-1),xor_y_var(n,i-1)},[17,18]]]$                   /* c20 */

/* Resolution refutation from
     primec_0(x_{1} + x_{2} = -y_{2})
     primec_0(x_{1} + x_{2} = y_{2})
   using the variable naming scheme from gen_2xor_fcl(n):
*/
xor_2c_final_resl(n) := [
  /* primec_0(x_{1} + x_{2} = y_{2}) */
  {-xor_x_var(n,1),-xor_x_var(n,2),-xor_y_var(n,2)},             /* c1 */
  {-xor_x_var(n,1),xor_x_var(n,2),xor_y_var(n,2)},               /* c2 */
  {xor_x_var(n,1),-xor_x_var(n,2),xor_y_var(n,2)},               /* c3 */
  {xor_x_var(n,1),xor_x_var(n,2),-xor_y_var(n,2)},               /* c4 */
  /* primec_0(y_{2} = -y'_{2}) */
  {-xor_y_var(n,2),-xor_yp_var(n,2)},                            /* c5 */
  {xor_y_var(n,2),xor_yp_var(n,2)},                              /* c6 */
  /* Deriving primec_0(x_{1} + x_{2} = -y'_{2}) */
  [{-xor_x_var(n,1),-xor_x_var(n,2),xor_yp_var(n,2)},[1,6]],     /* c7 */
  [{-xor_x_var(n,1),xor_x_var(n,2),-xor_yp_var(n,2)},[2,5]],     /* c8 */
  [{xor_x_var(n,1),-xor_x_var(n,2),-xor_yp_var(n,2)},[3,5]],     /* c9 */
  [{xor_x_var(n,1),xor_x_var(n,2),xor_yp_var(n,2)},[4,6]],       /* c10 */
  /* primec_0(x_{1} + x_{2} = y'_{2}) */
  {-xor_x_var(n,1),-xor_x_var(n,2),-xor_yp_var(n,2)},            /* c11 */
  {-xor_x_var(n,1),xor_x_var(n,2),xor_yp_var(n,2)},              /* c12 */
  {xor_x_var(n,1),-xor_x_var(n,2),xor_yp_var(n,2)},              /* c13 */
  {xor_x_var(n,1),xor_x_var(n,2),-xor_yp_var(n,2)},              /* c14 */
  /* Refutation */
  [{-xor_x_var(n,1),-xor_x_var(n,2)},[7,11]],                    /* c15 */
  [{-xor_x_var(n,1),xor_x_var(n,2)},[8,12]],                     /* c16 */
  [{xor_x_var(n,1),-xor_x_var(n,2)},[9,13]],                     /* c17 */
  [{xor_x_var(n,1),xor_x_var(n,2)},[10,14]],                     /* c18 */
  [{-xor_x_var(n,1)},[15,16]],                                   /* c19 */
  [{xor_x_var(n,1)},[17,18]],                                    /* c20 */
  [{}, [19,20]]]$

/* Resolution refutation of gen_2xor_fcl(n) for n >= 3: */
xor_2c_resl(n) := compose_resl(
    /* primec_0(y_{n-1} + x_n = 0) */
    [{-xor_y_var(n,n-1),xor_x_var(n,n)},
     {xor_y_var(n,n-1),-xor_x_var(n,n)},
    /* primec_0(y'_{n-1} + x_n = 1) */
     {-xor_yp_var(n,n-1),-xor_x_var(n,n)},
     {xor_yp_var(n,n-1),xor_x_var(n,n)},
    [{-xor_y_var(n,n-1),-xor_yp_var(n,n-1)},[1,3]],
    [{xor_y_var(n,n-1),xor_yp_var(n,n-1)},[2,4]]],
    uaapply(compose_resl,create_list(xor_2c_step_resl(n,n-i),i,1,n-3)),
    xor_2c_final_resl(n))$

/* Statistics xor_2c_resl: */
nvar_xor_2c_resl(n) := 3*n-4$
ncl_xor_2c_resl(n) := 18*n - 29$

/*!
\endhtmlonly
*/
