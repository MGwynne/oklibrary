#!/bin/bash
# Matthew Gwynne, 13.1.2012 (Swansea)
# Copyright 2011 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the
# License, or any later version.

# Running minisat on many instances, given by a file containing parameters and
# a script which takes parameters and generates the CNF, collecting the data.

# Two modes of usage:

# RunManyMinisat params-file cnf-generator

# creates the experiment-directory "ExperimentManyMinisat_params-file_cnf-generator_timestamp"
# (in the current directory) containing the files
#  - Log: general logging information
#  - Parameter: the version of this script, the instance, and the solver used
#  - Environment: information on the computer environment
#  - a copy of the params-file
#  - a copy of the cnf-generator
#  - params_filename: contains the name of the (local) instance-file
#  - script_filename: contains the name of the (local) script.
#  - InputStatistics: statistics for each instance, row by row.
#  - Statistics: the extracted statistics, in R-readable format.
#  - InterruptedStatistics: the extracted statistics for any interrupted runs, in R-readable format.
#  - current: the line number in the parameter file of the last started instance.
# Furthermore Temp.cnf contains the instance currently solved, and Temp.out
# contains the solver output of the last solved instance.

# RunManyMinisat RunManyMinisat_dir

# Uses the already created RunManyMinisat_dir (created by a previous invocation
# of that script) to continue an interrupted processing.

# Remark: It seems best to use
#   RunManyMinisat params-file cnf-generator &
# or, on a remote machine,
#   nohup RunManyMinisat params-file cnf-generator &
# and then to switch into the experiment-directory, watching the progress via
#   tail Statistics


set -o errexit
set -o nounset

script_name="RunManyMinisat"
version_number=0.0.10

if [ $# -le 0 ] || [ $# -ge 3 ]; then
  echo -ne "ERROR[${script_name}]: Either provide two parameters: the file "
  echo -ne "listing parameters, and the CNF generator script, or provide "
  echo -ne "the path to a previously created RunManyMinisat output directory.\n"
  exit 1
fi

timestamp=$(date +"%Y-%m-%d-%H%M%S")
solver=minisat-2.2.0
statistics_tool=ExtendedDimacsFullStatistics-O3-DNDEBUG
extraction_tool=ExtractMinisat

if [ $# -ne 1 ]; then
    params=$1
    script=$2
    exp_dir=ExperimentManyMinisat_$(echo ${params} | tr -d " -./")_$(echo ${script} | tr -d " -./")_${timestamp}
    mkdir ${exp_dir}
    echo "Created experiment directory ${exp_dir}."
    cp ${params} ${exp_dir}
    cp ${script} ${exp_dir}
    chmod u+x ${exp_dir}/$(basename ${script})
else
    exp_dir=$1
fi

cd ${exp_dir}

if [ $# -ne 1 ]; then
    echo -n "Begin: " > Log
else
    echo -n "Restart: " >> Log
fi
date >> Log
echo "Process id = $$" >> Log

if [ $# -ne 1 ]; then
    params_local="$(basename ${params})"
    script_local="$(basename ${script})"
    echo ${params_local} > params_filename
    echo ${script_local} > script_filename
else
    params_local=$(cat params_filename)
    script_local=$(cat script_filename)
fi

echo "${script_name} version ${version_number}" > Parameter
echo ${params_local} >> Parameter
echo ${script_local} >> Parameter
echo "Solver: ${solver}" >> Parameter

uname -a >> Environment
echo >> Environment
cat /proc/cpuinfo >> Environment
echo >> Environment
free -m >> Environment

current_index=1
if [ $# -ne 1 ]; then
    echo ${current_index} > current
    param_headers=$(cat ${params_local} | head -n 1)
    ${extraction_tool} header-only | awk " { print \$0 \" ${param_headers}\"; }" > Statistics
    ${extraction_tool} header-only | awk " { print \$0 \" ${param_headers} current\"; }" > InterruptedStatistics
else
    current_index=$(cat current)
fi

cat ${params_local} | tail -n +$(expr ${current_index} + 1) | while read param_line; do

    echo ${current_index} > current

    script_command="./${script_local} ${param_line}"
    ${script_command} > Temp.cnf
    cat Temp.cnf | ${statistics_tool} >> InputStatistics

    set +e
    ${solver} Temp.cnf >Temp.out 2>&1
    estatus=$?
    set -e
    if [[ $estatus != 10 && $estatus != 20 ]]; then
        if [[ $estatus -eq 0 ]]; then
            echo -n "INTERRUPT: " >> Log
            cat Temp.out | ${extraction_tool} data-only | awk " { print \$0 \" ${param_line} ${current_index}\"; }" >> InterruptedStatistics
        else
            echo -n "ERROR: " >> Log
        fi
        date >> Log
        ps p $$ k time S >> Log
        echo
        echo -e "UNEXPECTED RETURN VALUE ${estatus}.\n" | tee -a Log
        exit 1
    fi

    echo -n "${param_line},   "

    cat Temp.out | ${extraction_tool} data-only | awk " { print \$0 \" ${param_line}\"; }" >> Statistics

    let current_index=${current_index}+1

done

ps p $$ k time S >> Log
echo -n "Completed: " >> Log
date >> Log

echo -e "\nCOMPLETED; see\n ${exp_dir}/Result"

exit 0
