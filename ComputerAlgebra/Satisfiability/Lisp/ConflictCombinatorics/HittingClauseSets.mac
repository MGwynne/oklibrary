/* Oliver Kullmann, 12.2.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac
  \brief Functions related to hitting clause-sets and generalisations

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/SplittingTrees.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Deficiency2.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Basic.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Counting/InclusionExclusion.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/DP-Reductions.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/MinVarDegrees.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Symmetries/Symmetries.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Constructions.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/InverseSingularDP.mac")$
/* Below there are further includes (delayed). */


/* ***************************************
   * Representations via splitting trees *
   ***************************************
*/

/* Given a splitting tree (a tree whose inner nodes are labelled by boolean
   literals), extract the hitting clause-set given by the false-leaves
   (which is unsatisfiable iff the tree is complete; the "clause-set"
   contains a tautological clause (this for the CNF interpretation) iff a
   variable occurs twice on some  path). */
/* The unsatisfiable hitting clause-sets generated in this way are the
   "tree hitting clause-sets", and with tautological clauses removed these
   are exactly those hitting clause-sets which have a read-once resolution
   refutation.
   The other hitting clause-sets created are subsets of tree hitting
   clause-sets. */
treehittingcls_st(T) := setify(usat_clauses_st(T))$
/* The dual hitting clause-set, representing the unterlying CNF as DNF */
dualtreehittingcls_st(T) := setify(sat_pass_st(T))$
/* The full representation, consisting of a hitting clause-set representing
   the falsifying assignments (as CNF), and of a hitting clause-set
   representing the satisfying assignments (as DNF, i.e. as sets of
   partial assignments). */
hitting_cls_rep_st(T) := [treehittingcls_st(T), dualtreehittingcls_st(T)]$

/* Convenience functions, which generate splitting trees by backtracking
   solvers (without backtracking); the heuristics needs to be
   supplied): */
treehittingcls_fcs(FF,h) := treehittingcls_st(dll_simplest_st(FF,h))$
dualtreehittingcls_fcs(FF,h) := dualtreehittingcls_st(dll_simplest_st(FF,h))$
hitting_cls_rep_fcs(FF,h) := hitting_cls_rep_st(dll_simplest_st(FF,h))$
/* The variations where the splitting trees first are condensed (this
   is sensible for analysing boolean functions): */
treehittingcls_condensed_fcs(FF,h) := treehittingcls_st(condense_st(dll_simplest_st(FF,h)))$
dualtreehittingcls_condensed_fcs(FF,h) := dualtreehittingcls_st(condense_st(dll_simplest_st(FF,h)))$
hitting_cls_rep_condensed_fcs(FF,h) := hitting_cls_rep_st(condense_st(dll_simplest_st(FF,h)))$


/* **************
   * Generators *
   **************
*/

/* An unsatisfiable uniform clause-set F with clause-length k has at least
   2^k clauses, and the minimum is attained exactly for the uniform hitting
   clause-sets with clause-length k and 2^k clauses.

   The two extreme cases are given by full_fcs(n) (with maximal deficiency)
   and by the following special SMUSAT(1) clause-sets (with minimal
   deficiency), which are (up to renaming) exactly the uniform elements of
   SMUSAT(1) with clause-length k.
*/
uniform_usat_hitting_min(k) := treehittingcls_st(complete_st_alldifferent(k))$
uniform_usat_hitting_max(k) := full_cs(k)$

/* The up to isomorphism unique unsatisfiable hitting clause-set
   with n variables and of deficiency 2^n - n - 1;
   non-singular iff n >= 3. */
/* Prerequisite: n >= 1. */
nearly_full_hitting_fcs(n) := block([FF : full_fcs(n)],
  return([FF[1], adjoin(setn(n-1), setdifference(FF[2], {setn(n), adjoin(-n,setn(n-1))}))]))$

/* An unsatisfiable non-singular hitting clause-set with m+1 variables and
   deficiency 2^m - m + 1, while the minimum var-degree is 2^m.
   Prerequisite: m >= 2.
*/
over_full_hitting_fcs(m) := block(
 [n : m+1, A : full_cl(2), B],
  B : full_cs_v(setmn(3,n)),
  [setn(n), union({A[1],A[2]}, or_cs2({A[3]}, B), or_cs2({A[4]}, B))])$
/* Remarks: over_full_hitting_fcs(m) realises the maximum min-var-degree for
   clause-sets of deficiency 2^m-m+1.
*/


/* Saturated minimally unsatisfiable Horn clause-sets with k variables: */
smusat_horn_cs(k) := treehittingcls_st(horn_st(k))$
/* Standardised (trv[] -> 1, trv[2] -> 2, trv[2,2] -> 3 etc.): */
smusat_horn_stdfcl(k) := [create_list(i,i,1,k),
 endcons(setmn(-k,-1),create_list(setify(cons(i,create_list(-j,j,1,i-1))),i,1,k))]$
smusat_horn_stdfcs(k) := fcl2fcs(smusat_horn_stdfcl(k))$
/* Statistics: */
nvar_smusat_horn(k) := k$
ncl_smusat_horn(k) := k+1$
ncl_list_smusat_horn(k) := if k=0 then [[0,1]] else
 endcons([k,2], create_list([i,1],i,1,k-1))$
 nlitocc_smusat_horn(k) := k*(k+1)/2 + k$

/* More generally, saturated minimally unsatisfiable level-l Horn clause-sets
   with k variables: */
smusat_genhorn_cs(k,l) := treehittingcls_st(genhorn_st(k,l))$
/* Remark: These tree-hitting clause-sets are saturated MU's of deficiency 1
   and of hardness min(k,l).
*/
/* The satisfiable variations, adding one new variable to each clause: */
sat_genhorn_cs(k,l) := dualtreehittingcls_st(genhornsat_st(k,l))$
/* Remark: These clause-sets F(k,l) have the following properties:
    - let c := c(F(k,l)) be the number of clauses (note that c is also the
      number of clauses of smusat_genhorn_cs(k,l))
    - deficiency 1-c
    - 1-regular hitting clause-sets
    - satisfiable
    - exactly 2^c-1 many prime implicates (as shown in [Sloan, Soereny, Turan,
      On k-term DNF with the largest number of prime implicants, 2007]; also
      shown there is that extremality w.r.t. the number of prime implicates
      is actually characteristic for the clause-sets obtained from SMU(1) by
      adding disjoint non-empty variable-sets to all the clauses)
    - exactly hardness min(k,l).
*/

/* The DNF for sat_genhorn_cs(k,l): */
dual_sat_genhorn_cs(k,l) := treehittingcls_st(genhornsat_st(k,l))$
/* The negated form of sat_genhorn_cs(k,l): */
sat_neg_genhorn_cs(k,l) := map(comp_sl,dual_sat_genhorn_cs(k,l))$

/* Unsatisfiable clause-sets formed by taking the negation of sat_genhorn_cs(k,l)
   and various representations of sat_genhorn_cs(k,l). */

/* Using the direct CNF representation of sat_genhorn_cs(k,l): */
unsat_conflicting_genhorn_cs(k,l) :=
  union(sat_neg_genhorn_cs(k,l), sat_genhorn_cs(k,l))$
/* Using the dualts translation of the DNF for sat_genhorn_cs(k,l): */
unsat_conflicting_genhorn_dts_cs(k,l) :=
  union(sat_neg_genhorn_cs(k,l), dualts_cs(dual_sat_genhorn_cs(k,l)))$
/* Using the dualtsminus translation of the DNF for sat_genhorn_cs(k,l): */
unsat_conflicting_genhorn_dtsm_cs(k,l) :=
  union(sat_neg_genhorn_cs(k,l), dualtsminus_cs(dual_sat_genhorn_cs(k,l)))$

/* Example from [Savicky, Sgall, 2000, DNF tautologies with a limited number
   of occurrences of every variable]: */
sasg2000 : [setn(4), {{1,-2,4},{2,-3,4},{-1,3,4},{1,2,3},
 {1,-2,-4},{2,-3,-4},{-1,3,-4},{-1,-2,-3}}]$
/* Example from [Brouwer, 1999, An associative block design ABD(8,5)]: */
brouwer1999 : [setn(8), {
 {1,2,3,4,5},{-1,2,3,4,5},{1,2,3,4,-5},{-1,2,3,4,-5},
 {1,2,3,-4,6},{-1,2,3,-4,6},{1,-4,5,-6,7},{-1,-4,5,-6,7},
 {2,-4,-6,-7,8},{3,-4,-6,-7,-8},{1,-4,-5,-6,7},{-1,-4,-5,-6,7},
 {1,-3,5,6,8},{-1,-3,5,6,8},{2,-3,4,7,-8},{1,-3,5,-7,-8},{-1,-3,5,-7,-8},
 {2,-3,4,-6,8},{2,-3,-5,6,8},{1,-3,-5,-7,-8},{-1,-3,-5,-7,-8},
 {-3,-4,6,7,-8},{-2,3,5,6,8},{-2,4,6,7,-8},{-2,3,4,-7,-8},
 {1,-2,4,-6,7},{-1,-2,4,-6,7},{-2,5,-6,-7,8},{-2,-5,6,7,8},
 {1,-2,-5,-7,8},{-1,-2,-5,-7,8},{-2,3,-4,6,-8}}]$
/* The possibly unique (up to isomorphism) result of applying
   2-subsumption resolution: */
rbrouwer1999 : [setn(7), {
 {-7,-5,-1,3,6},{-7,-4,-2,1},{-7,-4,1,2,3},{-7,-3,-2,1,4},
 {-7,-3,2,5},{-7,-2,-1,5,6},{-7,-1,2,3,5},{-7,1,3,4,6},{-6,-5,-1,2,3},
 {-6,-4,1,3,7},{-6,-3,1,5,7},{-6,-2,-1},{-6,-1,2,5,7},{-6,1,3,4},
 {-5,-3,-2,-1,6},{-5,-3,-2,1,7},{-5,-3,2},{-5,3,6,7},{5,6,7}}]$


/* Those formal hitting clause-sets which according to a conjecture by OK+XSZ
   realise the maximal number of variables for given deficiency k >= 2
   for unsatisfiable hitting clause-sets without singular variables.
*/
max_var_hitting_def(k) := if k=2 then musatd2_fcs(3) else
  vardisjoint_full_gluing(max_var_hitting_def(k-1), musatd2_fcs(3))$
nvar_max_var_hitting_def(k) := 3 + (k-2) * 4$
/* Alternatives for h >= 2, which realise for deficiencies 2,3,5,9,17,...
   the same number of variables, and having hardness h; not isomorphic to
   any max_var_hitting_def(k) for h >= 4, since all max_var_hitting_def(k)
   for k >= 3 have hardness = 3:
*/
max_var_hittingdef2_cs(h) := if h<=3 then max_var_hitting_def(h)
 else block([F:max_var_hittingdef2_cs(h-1)],
  vardisjoint_full_gluing(F,F))$
def_max_var_hittingdef2_cs(h) := 2^(h-2)+1$
nvar_max_var_hittingdef2_cs(h) := 2^h-1$


/* Given a set S of formal hitting clause-sets, compute the set of all
  singular hitting extensions by (exactly) k steps (where k is an integer):
*/
all_hitting_extensions_k_fcs(S,k) := if k < 0 then {}
 elseif k=0 then S else
  all_hitting_extensions_k_fcs(lunion(map(all_pre_hitting_extensions_fcs,S)),k-1)$
/* Now returning a set of non-isomorphic representatives: */
all_reps_hitting_extensions_k_fcs(S,k) :=
 if k < 0 then {} else block([S : representatives_fcs(S)],
   if k=0 then return(S) else
    all_reps_hitting_extensions_k_fcs(lunion(map(all_pre_hitting_extensions_fcs,S)),k-1))$


/* *********
   * Tests *
   *********
*/

/* SAT decision for hitting clause-sets: */
sat_decision_hitting_cs(F) := is(satprob_hitting(F) > 0)$

/* Tests whether a clause-set is a hitting clause-set: */
hittingcsp(F) := block([l : length(F), L : listify(F), break : false],
  for i : 1 thru l-1 unless break do for j : i+1 thru l unless break do
    if not clashp(L[i], L[j]) then break : true,
  return(not break))$
/* hittingcsp(F) = complete_g_p(cg_cs(F)) */
/* Also: hittingcsp(F) iff independence_number_cs(F) <= 1. */
/* Tests whether a clause-set is a 1-regular hitting clause-set: */
hitting1rcsp(F) := block([l : length(F), L : listify(F), break : false],
  for i : 1 thru l-1 unless break do for j : i+1 thru l unless break do
    if not length(intersection(L[i],comp_sl(L[j]))) = 1 then break : true,
  return(not break))$


/* Tests whether a clause-set is a tree hitting clause-set: */
treehittingcsp(F) := block([G : var_hyp(cs_to_fcs(F))],
  if emptyp(G[1]) then return(is(F = {{}}))
  else block([D : apply(intersection, listify(G[2])), v],
    if emptyp(D) then return(false)
    else (
      v : listify(D)[1],
      return(
        treehittingcsp(apply_pa({v},F)) and treehittingcsp(apply_pa({-v},F))))))$

/* Tests whether a clause-set is a uniform unsatisfiable hitting clause-set: */
uuhittingcsp(F) :=
 hittingcsp(F) and uniformcsp(F) and not emptyp(F) and is(ncl_cs(F) = 2^(length(listify(F)[1])))$

/* Returns false if F is not an ABD, and otherwise returns (n,k): */
abd_parameters(F) :=
 if not uuhittingcsp(F) or not variableregularcsp(F) then false
 else [nvar_cs(F), length(listify(F)[1])]$

/* Checks whether input F is unsatisfiable hitting and reduced w.r.t.
   singular DP-reduction: In the negative case returns the empty list,
   and otherwise the unit-list containing the deficiency. */
check_hitting_nsing_def(F) := if hittingcsp(F) and nonsingular_csp(F)
   and not sat_decision_hitting_cs(F) then [deficiency_cs(F)]
 else [];


/* **************************************************************
   * Necessary conditions for unsatisfiable hitting clause-sets *
   **************************************************************
*/

/* Find all clause-length distributions for a given deficiency def,
   number of variables n, and m literal occurrences altogether removed
   from the clause-list with (n+def) many full clauses, such that
   the remaining clause-list fulfills the unsatisfiability-condition,
   assuming that it is a hitting clause-set. */
/* More precisely, the output is a set of set-maps, each mapping the available
   clause-lengths to their occurrence numbers. */
/* If the output is empty, then no unsatisfiable hiting clause-set F with
   deficiency_cs(F) = def, nvar_cs(F) = n and nlitocc_cs(F) = (n+def)*n - m
   is possible. */
/* The idea is that the partitions of m = m_1 + ... + m_r are considered,
   each entry m_i relating to a different clause from which exactly m_i
   literals are removed. */
/* Prerequisite: def,n,m are non-negative integers, def >= 1. */
all_cld_uhit(def,n,m) := block(
 [c : n + def, l, res : []],
  if n = 0 then /* actually, should be superfluous ??? */
    if def = 1 and m = 0 then return({{[0,1]}}) else return({}),
  l : c * n,
  if m > l then return({}),
  for P in ext_integer_partitions(m) do block([L : length(P), nfc],
    nfc : c - L, /* no. of full clauses */
    if nfc >= 0 then block(
     [s : 2^(-n) * nfc + sum(2^(-(n-P[i])),i,1,L)],
      if s = 1 then block([cl_dist : sm2hm({})],
        if nfc > 0 then set_hm(cl_dist,n, c - L),
        for i in P do
          set_hm(cl_dist,n-i,ev_hm_d(cl_dist,n-i,0)+1),
        res : endcons(hm2sm(cl_dist),res)
      ))),
  return(setify(res)))$
/* Filtering-out cases which do not allow the min-var-degree
   to be at least mvd. */
/* The proof for the condition is that in the variable-clause matrix
   there cannot be a row with strictly more than c - mvd zeros, and
   thus we can have at most (c - mvd) * n zeros. */
all_cld_uhit_minvd(def,n,mvd) := apply(union,
  create_list(all_cld_uhit(def,n,m),m,0,((def+n)-mvd)*n))$
/* The instance where we search for clause-sets where the general upper
   bound on the min-var-degree is attained. */
all_cld_uhit_maxminvd(def,n) := all_cld_uhit_minvd(def,n,nonmersenne_rec[def])$
/* Filtering out cases with unit-clauses. */
all_cld_uhit_maxminvd_nu(def,n) := subset(all_cld_uhit_maxminvd(def,n),
 lambda([S],is(listify(S)[1][1] # 1)))$


/* ****************************************************
   * Representing clause-sets via hitting clause-sets *
   ****************************************************
*/

/* Decomposition into a list of hitting clause-sets via the Maxima
   function max_clique; simple greedy approach by grabbing the largest
   clique. */
/* The length of the returned list is an upper bound on the partition
   number of the conflict graph. */
hitting_decomposition_m_cs(F) := block([G : g2mg(cg_cs(F)), G2, R : []],
 G2 : copy_graph(G),
 while graph_order(G2) > 0 do block([M : max_clique(G2)],
   R : endcons(setify(M), R),
   for v in M do remove_vertex(v, G2)),
 map(lambda([M],map(lambda([v],get_vertex_label(v,G)),M)), R))$


/* ********************************************************************
   * Finding hitting clause-sets with given deficiency "sporadically" *
   ********************************************************************
*/

/* Applying partial assignments */

/* Find all hitting clause-sets of a given deficiency obtained from
   a given hitting clause-set by applying partial assignments: */
all_hittinginstances_def(F,k) :=
  subset(map(lambda([phi],apply_pa(phi,F)),all_pass(var_cs(F))),
         lambda([F],is(deficiency_cs(F)=k)))$

/* Applying DP-resolution */

/* Find all hitting clause-sets of a given deficiency obtained from
   a given hitting clause-set by applying DP-resolutions.
   The variable given as optional third parameter collects the results;
   if already set, then it won't be reset.
   The variable given as optional fourth argument reflects the permutation
   count; if set, then the computation starts with this permutation
   (in the order given by listify(permutations)).
*/
all_hitting_DP_reductions_def(F,k,[mon]) := block(
 [V : var_cs(F),B,result,_res,permutation_count,_pc],
 if length(mon) = 0 then (
   _res : 'result, _pc : 'permutation_count)
 elseif length(mon) = 1 then (
   _res : mon[1], _pc : 'permutation_count)
 else (
   _res : mon[1], _pc : mon[2]),
 if not setp(ev(_res)) then _res :: {},
 if not integerp(ev(_pc)) then _pc :: 0 else _pc :: max(ev(_pc)-1,0),

 if deficiency_cs(F) = k then _res :: adjoin(F,ev(_res)),
 if emptyp(V) then return(ev(_res))
 else block(
   [P : rest(permutations(V),ev(_pc))],
    for p in P do block([G : F],
      _pc :: ev(_pc) + 1,
      for v in p do (
        G : dp_operator(G,v),
        if deficiency_cs(G) = k then _res :: adjoin(G,ev(_res)))),
    return(ev(_res))))$


/* ********************************************************************
   * Finding hitting clause-sets with given deficiency systematically *
   ********************************************************************
*/

/* The method is to applying 2-subsumption resolution. */

/* First the basic search algorithms. */

/* Given a hitting clause-set F, find all (necessarily hitting) clause-sets
   derived from F by (exactly) k 2-subsumption resolution-steps without
   removing variables. The result is returned, and also iteratively collected
   in the variable which is given as quoted third argument. */
derived_hitting_cs(F,k,results_derived_hitting_cs) := (
  results_derived_hitting_cs :: {},
  derived_hitting_cs_forb(F,k,{}))$

/* Additionally now a set of forbidden resolution-pairs is given. */
/* Inherits results_derived_hitting_cs. */
derived_hitting_cs_forb(F,k,forb_pairs) :=
 if k < 0 then {}
 elseif k = 0 then (
   results_derived_hitting_cs :: adjoin(F, ev(results_derived_hitting_cs)), {F})
 else
 block([FP : setdifference(two_subsumption_resolvable_cs(F),forb_pairs), C,D, x, found : false],
   for P in FP unless found do (
     [C,D] : listify(P), x : resolution_literal(C,D),
     if not elementp(var_l(x), var_cs(setdifference(F,P))) then
       forb_pairs : adjoin(P, forb_pairs)
     else found : true),
   if not found then return({}) else
     return(union(
       derived_hitting_cs_forb(adjoin(resolvent_l(C,D,x),setdifference(F,{C,D})),k-1,forb_pairs),
       derived_hitting_cs_forb(F,k,adjoin({C,D},forb_pairs)))))$

/* More generally, only allow resolution steps such that for the obtained
   clause-set predicate pred is true. */
/* Prerequisite: F is a hitting clause-set, pred(F) = true */
/* The predicate can also use the inherited variables
   C,D : parent-clause
   x : resolution literal
   F : original clause-set.
*/
derived_hitting_cs_pred(F,k,results_derived_hitting_cs,pred) := (
  results_derived_hitting_cs :: {},
  derived_hitting_cs_pred_forb(F,k,{}))$

/* Again the variation with a given set of forbidden pairs. */
/* Inherits results_derived_hitting_cs and pred. */
derived_hitting_cs_pred_forb(F,k,forb_pairs) :=
 if k < 0 then {}
 elseif k = 0 then (
   results_derived_hitting_cs :: adjoin(F, ev(results_derived_hitting_cs)), {F})
 else
 block([FP : setdifference(two_subsumption_resolvable_cs(F),forb_pairs), C,D,x,G, found : false],
   for P in FP unless found do (
     [C,D] : listify(P), x : resolution_literal(C,D),
     G : adjoin(resolvent_l(C,D,x),setdifference(F,P)),
     if not pred(G) then
       forb_pairs : adjoin(P, forb_pairs)
     else found : true),
   if not found then return({}) else
     return(union(
       derived_hitting_cs_pred_forb(adjoin(resolvent_l(C,D,x),setdifference(F,{C,D})),k-1,forb_pairs),
       derived_hitting_cs_pred_forb(F,k,adjoin({C,D},forb_pairs)))))$

monitor_check_dhcpi() := if oklib_monitor then (
  print("M[derived_hitting_cs_pred_isoelim]: ENTRY;"),
  print("number of steps:", k, "; input clause-set statistics:", statistics_cs(F)))$
monitor_check_dhcpfi_entry() :=
 if oklib_monitor and oklib_monitor_level >= 2 then (
   print("M[derived_hitting_cs_pred_forb_isoelim]: ENTRY;"),
   print("number of steps:", k, "; input clause-set statistics:", statistics_cs(F), "; number of forbidden pairs:", length(forb_pairs)))$
monitor_check_dhcpfi_found() :=
 if oklib_monitor and oklib_monitor_level >= 1 then (
   print("M[derived_hitting_cs_pred_forb_isoelim]: Found"), print(F))$

/* The variation where isomorphic cases for branching are eliminated. */
/* Here the predicate can use the derived variables
 - P, the resolution pair
 - F, the original clause-set.
*/
derived_hitting_cs_pred_isoelim(F,k,results_derived_hitting_cs,pred) := (
  monitor_check_dhcpi(),
  results_derived_hitting_cs :: {},
  derived_hitting_cs_pred_forb_isoelim(F,k,{}))$
derived_hitting_cs_pred_forb_isoelim(F,k,forb_pairs) := (
 monitor_check_dhcpfi_entry(),
 if k < 0 then {}
 elseif k = 0 then (
   monitor_check_dhcpfi_found(),
   results_derived_hitting_cs :: adjoin(F, ev(results_derived_hitting_cs)),
   {F})
 else
 block(
  [FP : setdifference(two_subsumption_resolvable_cs(F),forb_pairs),
   R,G, found : false, V : var_cs(F)],
   for P in FP unless found do (
     G : adjoin(resolvent_s(P),setdifference(F,P)),
     if not pred(G) then
       forb_pairs : adjoin(P, forb_pairs)
     else (FP : disjoin(P,FP), found : true, R : P)),
   if not found then return({}),
   block(
    [first_branch : derived_hitting_cs_pred_forb_isoelim(G,k-1,forb_pairs),
     removable : {}],
     for P in FP do block([G2 : adjoin(resolvent_s(P),setdifference(F,P))],
       if is_isomorphic_btr_fcs([V,G],cs_to_fcs(G2)) then
         removable : adjoin(P,removable)),
    return(union(first_branch,
      derived_hitting_cs_pred_forb_isoelim(F,k,adjoin(R,union(forb_pairs,removable))))))))$

/* The instance of the previous function where no singular variable is
   created. */
/* Prerequisite: F does not have singular variables. */
derived_hitting_cs_nsing(F,k,results_derived_hitting_cs) := derived_hitting_cs_pred(F,k,results_derived_hitting_cs,nonsingular_csp)$
derived_hitting_cs_nsing_isoelim(F,k,results_derived_hitting_cs) := derived_hitting_cs_pred_isoelim(F,k,results_derived_hitting_cs,nonsingular_csp)$


/* Now computing *all* non-isomorphic cases. repository is a hash table,
   and its given value is used. Returns the number of (new) cases found (not
   including those already in repository). */
/* The predicate can also use the inherited variables
   C,D : parent-clause
   x : resolution literal
   F : original clause-set.
*/
all_derived_hitting_cs_pred_isoelim(F,repository,pred) :=
  all_derived_hitting_cs_pred_forb_isoelim(F,{},true)$
/* "repository" and "pred" are inherited. */
/* Uses random_permutation, and is thus governed by set_random_state. */
all_derived_hitting_cs_pred_forb_isoelim(F,forb_pairs,check) := block(
 [count : 0, V : var_cs(F)],
  oklib_save('repository),
  if check then
    if not manage_repository_isomorphism_types([V,F], repository) then
      return(count)
    else count : count + 1,
  block(
   [FP : setdifference(two_subsumption_resolvable_cs(F),forb_pairs),
    R,G, found : false],
    for P in random_permutation(FP) unless found do (
      G : adjoin(resolvent_s(P),setdifference(F,P)),
      if not pred(G) then
        forb_pairs : adjoin(P, forb_pairs)
       else (FP : disjoin(P,FP), found : true, R : P)),
    if not found then return(count),
    block(
     [removable : {}],
      count : count + all_derived_hitting_cs_pred_forb_isoelim(
                   G,
                   forb_pairs,
                   true),
      for P in FP do block([G2 : adjoin(resolvent_s(P),setdifference(F,P))],
        if is_isomorphic_btr_fcs([V,G],cs_to_fcs(G2)) then
          removable : adjoin(P,removable)),
      return(count + all_derived_hitting_cs_pred_forb_isoelim(
                   F,
                   adjoin(R,union(forb_pairs,removable)),
                   false)))))$
/* The variation where greedily the min-var-degree is maximised. */
/* Assumes that no variables is eliminated. */
all_derived_hitting_cs_pred_isoelim_mvd(F,repository,pred) :=
  all_derived_hitting_cs_pred_forb_isoelim_mvd(F,{},true)$
/* "repository" and "pred" are inherited. */
/* Uses random_permutation, and is thus governed by set_random_state. */
all_derived_hitting_cs_pred_forb_isoelim_mvd(F,forb_pairs,check) := block(
 [count : 0, V : var_cs(F), max_mvd],
  max_mvd : nonmersenne_rec[deficiency_fcs([V,F]) - 1],
  oklib_save('repository),
  if check then
    if not manage_repository_isomorphism_types([V,F], repository) then
      return(count)
    else count : count + 1,
  block(
   [FP : setdifference(two_subsumption_resolvable_cs(F),forb_pairs),
    R : {}, G, mvd : minf,
    found : false],
    for P in random_permutation(FP) unless found do block(
      [G2 : adjoin(resolvent_s(P),setdifference(F,P))],
      if not pred(G2) then
        forb_pairs : adjoin(P, forb_pairs)
      else block([d : min_variable_degree_cs(G2)],
        if d = max_mvd then (found : true, G : G2, R : P)
        else if d > mvd then (mvd : d, G : G2, R : P))
    ),
    if not found and R = {} then return(count),
    block(
     [removable : {}],
      count : count + all_derived_hitting_cs_pred_forb_isoelim_mvd(
                   G,
                   forb_pairs,
                   true),
      FP : setdifference(FP,forb_pairs),
      FP : disjoin(R,FP),
      for P in FP do block([G2 : adjoin(resolvent_s(P),setdifference(F,P))],
        if is_isomorphic_btr_fcs([V,G],cs_to_fcs(G2)) then
          removable : adjoin(P,removable)),
      return(count + all_derived_hitting_cs_pred_forb_isoelim_mvd(
                   F,
                   adjoin(R,union(forb_pairs,removable)),
                   false)))))$

/* Now instances and applications of these basic algorithms. */

/* The instance where no singular variable is created. */
/* Prerequisite: F does not have singular variables. */
all_derived_hitting_cs_nsing_isoelim(F,repository) := all_derived_hitting_cs_pred_isoelim(F,repository,nonsingular_csp)$
all_derived_hitting_cs_nsing_isoelim_mvd(F,repository) := all_derived_hitting_cs_pred_isoelim_mvd(F,repository,nonsingular_csp)$
/* The instance where only resolutions with full parent clauses
   are considered. */
all_derived_hitting_cs_fullpc_isoelim(F,repository) := all_derived_hitting_cs_pred_isoelim(F,repository,
 lambda([G], nonsingular_csp(G) and is(length(choose_element(P)) = nvar_cs(F))))$
/* The instance without restriction on the 2-subsumption-resolution
   steps. */
/* ERROR: Does not work fully correctly, since
   all_derived_hitting_cs_pred_isoelim assumes that no variables are
   eliminated. */
all_derived_hitting_cs_isoelim(F,repository) := all_derived_hitting_cs_pred_isoelim(F,repository,lambda([G],true))$


/* For a given deficiency and number of variables, find all hitting clause-set
   types s.t. no singular variables occur.
*/
/* The monitoring-variable "results_all_hitting" collects all hitting clause-sets
   found (if it has some value, then this will be overwritten). */
all_unsinghitting_def(def,n,results_all_hitting) := (
 results_all_hitting :: {},
 if def < 1 then {}
 elseif def = 1 then if n=0 then results_all_hitting :: {{{}}} else {}
 elseif def = 2 and n <= 2 then if n<2 then {} else  results_all_hitting :: {full_fcs(2)[2]}
 elseif n <= 2 then {}
 else block([F : full_fcs(n)[2]],
   if def = 2^n - n then return(results_all_hitting :: {F}),
   block([C : setn(n), D : union(setn(n-1),{-n})],
     F : adjoin(setn(n-1), setdifference(F,{C,D}))),
   representatives_cs(
     derived_hitting_cs_nsing_isoelim(F,
                              2^n-n-def - 1,
                              results_all_hitting))))$

/* Variation: for a given deficiency and number of 2-subsumption steps,
   find all hitting clause-set types s.t. no singular variables occur.
*/
all_unsinghitting_steps(steps,n,results_all_hitting) :=
  all_unsinghitting_def(2^n-n - steps, n, results_all_hitting)$


/* ***********************************************************
   * Finding hitting clause-sets with given n systematically *
   ***********************************************************
*/

/* For a given number of variables, find all hitting clause-set types
   (without singular variables). */
/* Returned is the total number, while parameter hash_repo
   (passed by name; initialised empty by this function)
   contains the hash-map for all instances. */
/* Prerequisite: n >= 2. */
all_unsinghitting(n, _hash_repo) := block([count],
  _hash_repo :: sm2hm({}),
  count : all_derived_hitting_cs_nsing_isoelim(full_fcs(n)[2],ev(_hash_repo)),
  count
)$
all_unsinghitting_mvd(n, _hash_repo) := block([count],
  _hash_repo :: sm2hm({}),
  count : all_derived_hitting_cs_nsing_isoelim_mvd(full_fcs(n)[2],ev(_hash_repo)),
  count
)$


/* ***************************
   * Maximal min-var-degrees *
   ***************************
*/

/* Late inclusion, since functions above are used by data/uhit_def.mac: */
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/data/uhit_def.mac")$

/* For the uhit-catalogue check for the existence of examples where the
   bound minvardegree_dmu(k) is sharp (these have value 0 in the last
   component). */
check_uhit_catalogue_maxminvardeg() :=
  apply_uhit(lambda([k,n,i,F], [k, n, i, seconde(minvardegree_dmu(k)) - min_variable_degree_cs(F)]))$
/* Extract the [k,n,i]-tuples where the bound is sharp, sorted
   lexicographically. */
sharp_uhit_catalogue_maxminvardeg() :=
  sort(
    map(lambda([t], rest(t,-1)),
      sublist(check_uhit_catalogue_maxminvardeg(), lambda([t],is(t[4]=0)))),
    orderlessp)$

/* For given deficiency, compute the maximal min-var-degree (in the
   uhit-catalogue). */
max_min_var_deg_uhit_def(k) := max_min_var_deg_cs(ev(all_uhit_def(k),eval))$
max_min_var_deg_uhit_def_mem[k] := max_min_var_deg_cs(ev(all_uhit_def(k),eval))$
/* Apply "remarray(max_min_var_deg_uhit_def_mem)" in case an update
   of uhit_def occurred. */


/* *************************
   * Resolution complexity *
   *************************
*/

/* A "nonsingular splitting tree" for a nonsingular unsatisfiable
   hitting clause-set F is like an ordinary splitting tree, only
   that at each non-root node after the assignment (of a single
   variable) singular DP-reduction is applied, until again a
   nonsingular (unsatisfiable hitting) clause-set is obtained.
   The size of such a tree is, as usual in this context, the
   number of leaves; let min_nssplittree_cs(F) be the minimal
   possible size.
   So the elements of UHIT_{delta=1} have min_nssplittree_cs(F) = 1,
   while all other elements have size > 1.
*/

/* For a (valid) isomorphism-type t=[[k,n],i] occurring in uhit_def compute the
   minimal size of a nonsingular splitting tree; if a tuple not in the
   uhit_def-catalogue is encountered, the tuple together with its type
   is printed, and "und" is returned.
*/
min_nssplittree_isot[t] := block([k,n,i,F,res:inf,G,tn,sum],
 [k,n] : t[1], i : t[2],
 if k=1 then return(1),
 F : uhit_def[k,n][i],
 for v : 1 thru n do (
   G : apply_pa_cs({v},F),
   tn : redisotype_uhit_def(G),
   if tn[2]="new" then (print(G,tn), return(und)),
   sum : min_nssplittree_isot[tn],
   G : apply_pa_cs({-v},F),
   tn : redisotype_uhit_def(G),
   if tn[2]="new" then (print(G,tn), return(und)),
   sum : sum + min_nssplittree_isot[tn],
   res : min(res, sum)
 ),
 res)$
/* Compute the minimal size of a nonsingular splitting tree for all clause-sets
   in uhit_def with deficiency k:
*/
min_nssplittree_def(k) := block(
 [L : map(first,uhit_def[k,"info"][4]), res : []],
  for n in L do block([l : length(uhit_def[k,n])],
   for i : 1 thru l do
    res : cons(min_nssplittree_isot[[[k,n],i]], res)
  ),
  reverse(res))$


/*!
\endhtmlonly
*/
