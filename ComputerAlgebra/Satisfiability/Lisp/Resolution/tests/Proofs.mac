/* Matthew Gwynne, 23.9.2011 (Swansea) */
/* Copyright 2011, 2012, 2013 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Resolution/tests/Proofs.mac
  \brief Tests related to resolution proofs

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/tests/Proofs.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Trees/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Pigeonhole.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$

kill(f)$

/* ************************************
   * Checking the defining properties *
   ************************************
*/

okltest_resl_p(f) := block(
  assert(f(1) = false),
  assert(f([]) = true),
  assert(f([1]) = false),
  assert(f([{1},1]) = false),
  assert(f([{}]) = true),
  assert(f([{1}]) = true),
  assert(f([{1},{2},{-3}]) = true),
  assert(f([{-1},{1},[{},[1,2]]]) = true),
  assert(f([{-1},{-2},{1,2},[{1},[2,3]],[{},[1,4]]]) = true),
  assert(f([{-1},{1},[{},[1,3]]]) = false),
  assert(f([{-1},{1},[{},["s",3]]]) = false),
  assert(f([{-1},{1},[{},[-1,2]]]) = false),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]]]) = true),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],{3}]) = true),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],[{},[1,2]]]) = true),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],[{},[3,4]]]) = false),
  true)$

okltest_resl_ref_p(f) := block(
  assert(f(1) = false),
  assert(f([]) = false),
  assert(f([1]) = false),
  assert(f([{1},1]) = false),
  assert(f([{}]) = true),
  assert(f([{1}]) = false),
  assert(f([{1},{2},{-3}]) = false),
  assert(f([{-1},{1},[{},[1,2]]]) = true),
  assert(f([{-1},{-2},{1,2},[{1},[2,3]],[{},[1,4]]]) = true),
  assert(f([{-1},{1},[{},[1,3]]]) = false),
  assert(f([{-1},{1},[{},["s",3]]]) = false),
  assert(f([{-1},{1},[{},[-1,2]]]) = false),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]]]) = true),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],{3}]) = true),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],[{},[1,2]]]) = true),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],[{},[3,4]]]) = false),
  true)$

okltest_reslrt_p(f) := block(
  assert(f([{}]) = true),
  assert(f([{1}]) = true),
  assert(f([{-1}]) = true),
  assert(f([{2}]) = true),
  assert(f([[1]]) = false),
  assert(f([{},[{1}],[{-1}]]) = true),
  assert(f([{},[{1}],[{1}]]) = false),
  assert(f([{},[{}],[{}]]) = false),
  assert(f([{},[{1}],[{-1}],[{1}]]) = false),
  assert(f([{1},[{1,2}],[{-2}]]) = true),
  assert(f([{1},[{1,2},[{1,2,3}],[{1,2,-3}]],[{-2},[{1,-2}],[{-1,-2}]]]) = true),
  assert(f([{},[{1,2},[{1,2,3}],[{1,2,-3}]],[{-2},[{1,-2}],[{-1,-2}]]]) = false),
  assert(f([{1},[{1,2},[{1,2,3}],[{1,2,-3}]],[{-2}]]) = true),
  assert(f([{1},[{1,2},[{1,2,3}],[{1,2,-3}],[{1,2}]],[{-2}]]) = false),
  if oklib_test_level = 0 then return(true),
  for m : 1 thru 3 do
    assert(f(st2reslrt_cs(
          dll_simplest_st(
            weak_php_fcs(m+1,m),
            dll_heuristics_first_formal),weak_php_fcs(m+1,m)[2])) = true),
  true)$


/* ************************************
   * Extraction                       *
   ************************************
*/


okltest_axioms_resl2cl(f) := block(
  assert(f([]) = []),
  assert(f([{}]) = [{}]),
  assert(f([{1}]) = [{1}]),
  assert(f([{1},{2},{-3}]) = [{1},{2},{-3}]),
  assert(f([{-1},{1},[{},[1,2]]]) = [{-1},{1}]),
  assert(f([{-1},{-2},{1,2},[{1},[2,3]],[{},[1,4]]]) = [{-1},{-2},{1,2}]),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]]]) = [{-1},{1},{1,2},{1,4}]),
  assert(
    f([{-1},{1},{1,2},{1,4},[{},[1,2]],{3}]) = [{-1},{1},{1,2},{1,4},{3}]),
  assert(
    f([{-1},{1},{1,2},{1,4},[{},[1,2]],[{},[1,2]]]) = [{-1},{1},{1,2},{1,4}]),
  true)$

okltest_resolvents_resl2cl(f) := block(
  assert(f([]) = []),
  assert(f([{}]) = []),
  assert(f([{1}]) = []),
  assert(f([{1},{2},{-3}]) = []),
  assert(f([{-1},{1},[{},[1,2]]]) = [{}]),
  assert(f([{-1},{-2},{1,2},[{1},[2,3]],[{},[1,4]]]) = [{1},{}]),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]]]) = [{}]),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],{3}]) = [{}]),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],{3}]) = [{}]),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],[{},[1,2]]]) = [{},{}]),
  true)$

okltest_irredundant_ref_resl(f) := block(
  assert(f([{}])),
  assert(f([{1},{-1},[{},[1,2]]])),
  assert(not(f([{1},{-1},{2},[{},[1,2]]]))),
  assert(not(f([{1,2},{-1,2},[{2},[1,2]],{1},{-1},[{},[4,5]]]))),
  true)$


/* ************************************
   * Modifying proofs                 *
   ************************************
*/

okltest_rename_resl(f) := block(
  assert(f([], sm2hm({})) = []),
  assert(f([], sm2hm({[1,2],[-1,-2]})) = []),
  assert(f([{1},{2}], sm2hm({[1,2],[-1,-2],[2,1],[-2,-1]})) = [{2},{1}]),
  assert(f([{1},{-2}], sm2hm({[1,2],[-1,-2],[2,1],[-2,-1]})) = [{2},{-1}]),
  assert(f([{1},{-2},{3}], sm2hm({[1,2],[-1,-2],[2,1],[-2,-1]})) = [{2},{-1},{3}]),
  assert(
    f([{1,-2},{1,2},[{1},[1,2]]], sm2hm({[1,3],[-1,-3],[2,4],[-2,-4]}))
      = [{3,-4},{3,4},[{3},[1,2]]]),
  true)$

okltest_compose_resl(f) := block(
  assert(f() = []),
  assert(f([]) = []),
  assert(f([{}]) = [{}]),
  assert(f([{}],[{}]) = [{}]),
  assert(f([{1}],[{1}]) = [{1}]),
  assert(f([{-1},{1},[{},[1,2]]]) = [{-1},{1},[{},[1,2]]]),
  assert(f([{-1},{1},{1},[{},[1,2]]]) = [{-1},{1},[{},[1,2]]]),
  assert(f([{-1},{1},{1},{-1},[{},[1,2]]]) = [{-1},{1},[{},[1,2]]]),
  assert(f([{-1},{1},{1},{-1},[{},[1,2]],{}]) = [{-1},{1},[{},[1,2]]]),
  assert(f([{-1},{1},{1},{-1},[{},[1,2]]],[{}]) = [{-1},{1},[{},[1,2]]]),
  assert(f([{-1},{1},[{},[1,2]]],[{-1},{1},[{},[1,2]]]) = [{-1},{1},[{},[1,2]]]),
  assert(f([{-1},{1},[{},[1,2]]],[{-1},{1},[{},[1,2]]],[{-1},{1},[{},[1,2]]]) = [{-1},{1},[{},[1,2]]]),
  assert(f([{-2,-1},{-2,1},[{-2},[1,2]]], [{-1,2},{1,2},[{2},[1,2]]],[{-2},{2},[{},[1,2]]]) = [{-2,-1},{-2,1},[{-2},[1,2]],{-1,2},{1,2},[{2},[4,5]],[{},[3,6]]]),
  assert(f([{-2,-1},{-2,1},[{-2},[1,2]]], [{-1,2},{1,2},[{2},[1,2]]], [{-2},{2},[{},[1,2]]], [{-2},{2},[{},[1,2]]]) = [{-2,-1},{-2,1},[{-2},[1,2]],{-1,2},{1,2},[{2},[4,5]],[{},[3,6]]]),
  true)$


/* ************************************
   * Generators                       *
   ************************************
*/

okltest_php_ext_uni_resl(f) := block(
  assert(f(0) = [{}]),
  assert(f(1) =
    [{-php_ext(1,1,1),-php_ext(1,2,1)},{php_ext(1,1,1)},{php_ext(1,2,1)},
     [{-php_ext(1,2,1)},[1,2]],[{},[3,4]]]),
  if oklib_test_level = 0 then return(true),
  assert(f(2) =
    [{-php_ext(1,1,1),php_ext(2,1,1),php_ext(2,1,2)},
     {-php_ext(1,1,1),php_ext(2,1,1),php_ext(2,3,1)},
     {php_ext(1,1,1),-php_ext(2,1,1)},
     {php_ext(1,1,1),-php_ext(2,1,2),-php_ext(2,3,1)},
     {-php_ext(1,2,1),php_ext(2,2,1),php_ext(2,2,2)},
     {-php_ext(1,2,1),php_ext(2,2,1),php_ext(2,3,1)},
     {php_ext(1,2,1),-php_ext(2,2,1)},
     {php_ext(1,2,1),-php_ext(2,2,2),-php_ext(2,3,1)},
     {-php_ext(2,1,1),-php_ext(2,2,1)},{-php_ext(2,1,1),-php_ext(2,3,1)},
     {php_ext(2,1,1),php_ext(2,1,2)},{-php_ext(2,1,2),-php_ext(2,2,2)},
     {-php_ext(2,1,2),-php_ext(2,3,2)},{-php_ext(2,2,1),-php_ext(2,3,1)},
     {php_ext(2,2,1),php_ext(2,2,2)},{-php_ext(2,2,2),-php_ext(2,3,2)},
     {php_ext(2,3,1),php_ext(2,3,2)},
     [{-php_ext(1,2,1),-php_ext(2,1,1),php_ext(2,2,1)},[6,10]],
     [{-php_ext(1,2,1),-php_ext(2,1,1)},[18,9]],
     [{-php_ext(1,1,1),php_ext(2,1,1),-php_ext(2,2,1)},[2,14]],
     [{-php_ext(1,1,1),-php_ext(2,2,1)},[20,9]],
     [{-php_ext(1,1,1),-php_ext(1,2,1),php_ext(2,1,2)},[1,19]],
     [{-php_ext(1,1,1),-php_ext(1,2,1),php_ext(2,2,2)},[5,21]],
     [{-php_ext(1,1,1),-php_ext(1,2,1),-php_ext(2,1,2)},[23,12]],
     [{-php_ext(1,1,1),-php_ext(1,2,1)},[24,22]],
     [{php_ext(1,1,1),php_ext(2,1,2)},[11,3]],
     [{php_ext(1,2,1),php_ext(2,2,2)},[15,7]],
     [{php_ext(1,1,1),-php_ext(2,1,2),php_ext(2,3,2)},[17,4]],
     [{php_ext(1,2,1),-php_ext(2,2,2),php_ext(2,3,2)},[17,8]],
     [{php_ext(1,1,1),-php_ext(2,1,2)},[28,13]],
     [{php_ext(1,2,1),-php_ext(2,2,2)},[29,16]],[{php_ext(1,1,1)},[30,26]],
     [{php_ext(1,2,1)},[31,27]],[{-php_ext(1,2,1)},[25,32]],[{},[33,34]]]),
  for i : 3 thru 5 do block([F],
    F : f(i),
    assert(resl_ref_p(F)),
    assert(irredundant_ref_resl(F))),
  true)$

okltest_php_ext_resl(f) := block(
  assert(
    okltest_php_ext_uni_resl(
      buildq([f], lambda([n], rename_resl(f(n),sm2hm(var_php2ephp_sm(n))))))),
  true)$

okltest_ncl_php_ext_uni_resl(f) := block(
  assert(f(0) = 1),
  assert(f(1) = 5),
  assert(f(2) = 35),
  assert(f(3) = 138),
  assert(f(4) = 385),
  true)$

okltest_xor_2c_step_resl(f) := block(
  assert(f(4,3) =
    [{-8,-6},{6,8},{-6,-5,-3},{-5,3,6},{-3,5,6},{-6,3,5},{-8,-7,-3},{-7,3,8},{-3,7,8},{-8,3,7},
    [{-5,-3,8},[3,2]],[{-8,-5,3},[4,1]],[{-8,-3,5},[5,1]],[{3,5,8},[6,2]],[{-7,-5,8},[8,11]],
    [{-8,-7,-5},[7,12]],[{-8,5,7},[10,13]],[{5,7,8},[9,14]],[{-7,-5},[15,16]],[{5,7},[17,18]]]),
  for n : 5 thru 8 do
    for i : 3 thru n-1 do
      assert(rename_resl(f(n,i), sm2hm({[xor_x_var(n,i),xor_x_var(4,3)],
                                        [xor_y_var(n,i-1),xor_y_var(4,2)],
                                        [xor_yp_var(n,i-1),xor_yp_var(4,2)],
                                        [xor_y_var(n,i),xor_y_var(4,3)],
                                        [xor_yp_var(n,i),xor_yp_var(4,3)]})) =
        [{-8,-6},{6,8},{-6,-5,-3},{-5,3,6},{-3,5,6},{-6,3,5},{-8,-7,-3},{-7,3,8},{-3,7,8},{-8,3,7},
        [{-5,-3,8},[3,2]],[{-8,-5,3},[4,1]],[{-8,-3,5},[5,1]],[{3,5,8},[6,2]],[{-7,-5,8},[8,11]],
        [{-8,-7,-5},[7,12]],[{-8,5,7},[10,13]],[{5,7,8},[9,14]],[{-7,-5},[15,16]],[{5,7},[17,18]]]),
  true)$

okltest_xor_2c_final_resl(f) := block(
  assert(f(3) =
    [{-4,-2,-1},{-1,2,4},{-2,1,4},{-4,1,2},{-5,-4},{4,5},[{-2,-1,5},[1,6]],[{-5,-1,2},[2,5]],
     [{-5,-2,1},[3,5]],[{1,2,5},[4,6]],{-5,-2,-1},{-1,2,5},{-2,1,5},{-5,1,2},[{-2,-1},[7,11]],
     [{-1,2},[8,12]],[{-2,1},[9,13]],[{1,2},[10,14]],[{-1},[15,16]],[{1},[17,18]],[{},[19,20]]]),
  for n : 3 thru 6 do
    assert(f(n) =
      [{-xor_y_var(n,2),-2,-1},{-1,2,xor_y_var(n,2)},{-2,1,xor_y_var(n,2)},
       {-xor_y_var(n,2),1,2},{-xor_yp_var(n,2),-xor_y_var(n,2)},
       {xor_y_var(n,2),xor_yp_var(n,2)},[{-2,-1,xor_yp_var(n,2)},[1,6]],
       [{-xor_yp_var(n,2),-1,2},[2,5]],[{-xor_yp_var(n,2),-2,1},[3,5]],
       [{1,2,xor_yp_var(n,2)},[4,6]],{-xor_yp_var(n,2),-2,-1},
       {-1,2,xor_yp_var(n,2)},{-2,1,xor_yp_var(n,2)},{-xor_yp_var(n,2),1,2},
       [{-2,-1},[7,11]],[{-1,2},[8,12]],[{-2,1},[9,13]],[{1,2},[10,14]],
       [{-1},[15,16]],[{1},[17,18]],[{},[19,20]]]),
  true)$

okltest_xor_2c_resl(f) := block(
  assert(f(3) =
    [{-4,3},{-3,4},{-5,-3},{3,5},[{-5,-4},[1,3]],[{4,5},[2,4]],{-4,-2,-1},{-1,2,4},{-2,1,4},
     {-4,1,2},[{-2,-1,5},[7,6]],[{-5,-1,2},[8,5]],[{-5,-2,1},[9,5]],[{1,2,5},[10,6]],
     {-5,-2,-1},{-1,2,5},{-2,1,5},{-5,1,2},[{-2,-1},[11,15]],[{-1,2},[12,16]],[{-2,1},[13,17]],
     [{1,2},[14,18]],[{-1},[19,20]],[{1},[21,22]],[{},[23,24]]]),
  assert(f(4) =
     [{-6,4},{-4,6},{-8,-4},{4,8},[{-8,-6},[1,3]],[{6,8},[2,4]],{-6,-5,-3},{-5,3,6},{-3,5,6},
      {-6,3,5},{-8,-7,-3},{-7,3,8},{-3,7,8},{-8,3,7},[{-5,-3,8},[7,6]],[{-8,-5,3},[8,5]],
      [{-8,-3,5},[9,5]],[{3,5,8},[10,6]],[{-7,-5,8},[12,15]],[{-8,-7,-5},[11,16]],
      [{-8,5,7},[14,17]],[{5,7,8},[13,18]],[{-7,-5},[19,20]],[{5,7},[21,22]],{-5,-2,-1},
      {-1,2,5},{-2,1,5},{-5,1,2},[{-2,-1,7},[25,24]],[{-7,-1,2},[26,23]],[{-7,-2,1},[27,23]],
      [{1,2,7},[28,24]],{-7,-2,-1},{-1,2,7},{-2,1,7},{-7,1,2},[{-2,-1},[29,33]],
      [{-1,2},[30,34]],[{-2,1},[31,35]],[{1,2},[32,36]],[{-1},[37,38]],[{1},[39,40]],
      [{},[41,42]]]),
  true)$


okltest_nvar_xor_2c_resl(f) := block(
  for n : 3 thru 5 do block([R : xor_2c_resl(n)],
    assert(f(n) = nvar_cl(append(axioms_resl2cl(R),resolvents_resl2cl(R))))),
  if oklib_test_level = 0 then return(true),
  for n : 6 thru 10 do block([R : xor_2c_resl(n)],
    assert(f(n) = nvar_cl(append(axioms_resl2cl(R),resolvents_resl2cl(R))))),
  true)$

okltest_ncl_xor_2c_resl(f) := block(
  for n : 3 thru 5 do
    assert(f(n) = length(xor_2c_resl(n))),
  if oklib_test_level = 0 then return(true),
  for n : 6 thru 10 do
    assert(f(n) = length(xor_2c_resl(n))),
  true)$

/*!
\endhtmlonly
*/
